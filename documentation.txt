Udemy Course Mastering React Testing: RTL, Vitest & MSW - John Smilga


Section 01: Introduction

01. Course Info

02. Discord Channel
-otvorimo link: https://discord.com/invite/GhUxjr66xz

03. Video Blur Fixed

04. Course Review


Section 02: React Testing Library Tutorial

05. Main Course Repo !!! Important !!!

06. Install/Setup Course Repository
-otvorimo link: https://www.npmjs.com/package/@testing-library/react
-otvorimo web stranicu: https://vite.dev/guide/
-preuzmemo folder 01-rtl-tutorial sa startnim folderima i fajlovima
-u terminalu udemo u folder cd 01-rtl-tutorial i ukucamo komandu npm i
-u jednom terminalu ukucamo komandu npm run dev
-u drugom terminalu ukucamo komandu npm test

07. Files and Folders

08. Explore First Test File
-otvorimo App.test.tsx komponentu

09. Test Validation Details

10. Vitest Info
-otvorimo web stranicu: https://vitest.dev

Quiz 1: React Testing Library Essentials Quiz

11. <SearchByText /> - Component
-kreiramo folder starter sa tsx komponentama
-u eslint.config.js fajl dodajemo opciju: '@typescript-eslint/no-unused-vars': 'warn'
-u komponentu Sandbox.tsx importujemo funkcije useState i useEffect iz biblioteke React
-u komponentu App.tsx importujemo komponentu Sandbox.tsx

12. SearchByText Methods - Overview

13. SearchByText Methods - Test File
-u folderu tutorial/01-search-by-text kreiramo komponentu Sandbox.test.tsx
-u komponentu Sandbox.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo komponentu Sandbox.tsx
-pozivamo funkciju describe() sa dva argumenta
-prvi argument funkcije describe() je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-prvi argument funkcije test() je opis testa, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkcije render(<Sandbox />) i screen.debug()
-kreiramo varijablu const heading
-pozivamo funkciju expect(heading).toBeInTheDocument()
-pozivamo funkciju expect(screen.getByText(/react/i)).toBeInTheDocument()
-kreiramo varijable const phoneRegex i const phoneText
-pozivamo funkciju expect(phoneText).toBeInTheDocument()
-kreiramo varijablu const errorMessage 
-pozivamo funkciju expect(errorMessage).not.toBeInTheDocument()
-kreiramo varijablu const items
-pozivamo funkciju expect(items).toHaveLength(3)
-kreiramo varijablu const asyncMessage
-pozivamo funkciju expect(asyncMessage).toBeInTheDocument()

14. Test Driven Development Example
-u folderu tutorial/02-tdd-example kreiramo komponentu Sandbox.test.tsx
-u komponentu Sandbox.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo komponentu Sandbox.tsx
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render()
-kreiramo varijablu const heading
-pozivamo funkciju expect(heading).toBeInTheDocument()
-u komponentu App.tsx importujemo komponentu Sandbox.tsx iz foldera tutorial/02-tdd-example

Quiz 2: React Testing Library Query Methods and TDD Basics Quiz

15. <SearchByRole /> Component
-u komponentu App.tsx importujemo komponentu Sandbox.tsx iz foldera tutorial/03-search-by-role
-u komponentu Sandbox.tsx importujemo funkcije useState i useEffect iz biblioteke React

16. SearchByRole Methods Overview
-otvorimo link: https://testing-library.com/docs/queries/about

17. SearchByRole Test File
-u komponentu Sandbox.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo komponentu Sandbox.tsx
-pozivamo funkciju describe() sa dva argumenta
-prvi argument je opis testova za nav element i navigacione elemente, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
-pozivamo funkciju expect(screen.getByRole('navigation')).toBeInTheDocument()
-pozivamo dvije funkcije expect() za linkove Home i About
-importujemo funkcija logRoles iz paketa testing-library/react
-vrijednost funkcije render(<Sandbox />) pohranjujemo u destruktuiranu varijablu const { container }
-pozivamo funkciju logRoles(container)
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za renderovanja naslova sa tacnim redoslijedom, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
-pozivamo dvije funkcije expect(screen.getByRole('heading', { ... }))
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za renderovanja img elementa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
- pozivamo funkciju expect(screen.getByRole('img', { ... }))
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za renderovanja button elemenata, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
-pozivamo tri funkcije expect(screen.getByRole('button', { .. }))
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za renderovanja button error elementa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />) 
-pozivamo funkciju expect(screen.queryByRole('button', { ... })) 
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za renderovanja asinhronog button elementa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />) 
-kreiramo varijablu const buttonName
-pozivamo funkciju expect(screen.queryByRole('button', { ... }))
-kreiramo varijablu const asyncButton
-pozivamo funkciju expect(asyncButton).toBeInTheDocument()

18. User Interactions Component
-otvorimo link: https://testing-library.com/docs/user-event/intro/#differences-with-fireevent
-u komponentu App.tsx importujemo komponentu Sandbox.tsx iz foldera tutorial/04-user-interactions
-u komponentu 04-user-interaction/Sandbox.tsx importujemo funkciju useState iz biblioteke React
-importujemo ikonice FaHeart i FaRegHeart iz paketa React Icons

19. User Interactions - Test File
-otvorimo link: https://www.npmjs.com/package/@testing-library/user-event
-u folderu tutorial/04-user-interactions kreiramo komponentu Sandbox.test.tsx
-u komponentu Sandbox.test.tsx importujemo funkcije render, screen i fireEvent iz paketa testing-library/react
-importujemo funkciju userEvent() iz paketa testing-library/user-event
-pozivamo funkciju describe() sa dva argumenta
-prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u komponenti Sandbox.tsx button elementima dodajemo atribut aria-label
-u funkciji describe() pozivamo cetiri funkcije test()

Quiz 3: React Testing Library: Search By Role and User Interactions Quiz

20. Form Testing - Sandbox
-otvorimo link: https://www.npmjs.com/package/validator
-u komponentu App.tsx importujemo komponentu Sandbox iz foldera tutorial/05-form-testing
-u komponentu Sandbox.tsx importujemo funkcije useState i validator
-kreiramo varijablu objekt const defaultState
-kreiramo varijable const labelStyles, inputStyles i buttonsStyles
-u funkciji Sandbox() kreiramo state varijablu const signupInput i set funkciju setSignupInput
-kreiramo state varijablu const error i set funkciju setError
-kreiramo funkcije handleChange() i handleSubmit()
-u jsx-u roditelj div elementu dodajemo Tailwind CSS klase
-u roditelj div elementu kreiramo form element
-u form elementu kreiramo tri div element za email, sifru i potvrdi sifru elemente
-dodajemo uslov za kondicionalno renderovanje error &&
-kreiramo button element sa prop type, onClick i className 
-funkciji handleChange() dodajemo parametar e sa tipom
-u funkciji handleChange() destruktuiramo varijable const { id, value }
-pozivamo funkciju setSignupInput()
-funkciji handleSubmit() dodajemo parametar e sa tipom
-u funkciji handleSubmit() pozivamo funkciju e.preventDefault()
-dodajemo uslove if za validaciju email adrese i unesenih sifri
-u uslove if dodajemo izjavu return setError()
-u funkciji handleSubmit() pozivamo funkciju setSignupInput(defaultState)

21. Test Empty Inputs
-kreiramo komponentu Sandbox.test.tsx
-u komponentu Sandbox.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo komponentu Sandbox.tsx
-pozivamo funkciju describe() sa dva argumenta
-prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za testiranje input elemenata da budu inicijalno prazna, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
-vrijednost funkcije render(<Sandbox />) pohranjujemo u destruktuiranu varijablu const { container }
-pozivamo funkciju screen.debub()
-pozivamo funkciju logRoles(container)
-kreiramo varijablu const emailInputElement
-pozivamo funkciju expect(emailInputElement).toHaveValue('')
-kreiramo varijablu const passwordInputElement
-pozivamo funkciju expect(passwordInputElement).toHaveValue('')
-kreiramo varijablu confirmPasswordInputElement
-pozivamo funkciju expect(confirmPasswordInputElement).toHaveValue('')
-u vite.config.js fajlu, u niz exclude dodajemo imena foldera u kojima ne zelimo da se testovi pokrecu

22. Test Typing in The Inputs
-u komponentu Sandbox.test.tsx importujemo funkciju userEvent iz paketa testing-library/user-event
-pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za testiranje input elemenata da se mogu unijeti podaci, dok je drugi argument asinhrona anonimna funkcija
-u asinhronoj anonimnoj funkciji kreiramo varijablu const user
-pozivamo funkciju render(<Sandbox />)
-kreiramo varijable const emailInputElement, passwordInputElement i confirmPasswordInputElement
-pozivamo funkciju await user.type(emailInputElement, 'test@test.com')
-pozivamo funkciju expect(emailInputElement).toHaveValue('test@test.com')
-pozivamo funkciju await user.type(passwordInputElement, 'secret')
-pozivamo funkciju expect(passwordInputElement).toHaveValue('secret')
-pozivamo funkciju await user.type(confirmPasswordInputElement, 'secret')
-pozivamo funkciju expect(confirmPasswordInputElement).toHaveValue('secret')

23. Refactor
-u komponenti Sandbox.test.tsx kreiramo funkciju getFormElements()
-u funkciji getFormElements() kreiramo varijablu objekt const elements
-u objektu elements kreiramo key - value parove emailInputElement, passwordInputElement, confirmPasswordInputElement i submitButton
-u funkciju getFormElements() dodajemo izjavu return elements
-u funkciji test() za inicijalno prikazivanje input elemenata kao prazna polja pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijablu: const { emailInputElement, passwordInputElement, confirmPasswordInputElement }
-pozivamo tri funkcije expect()
-u funkciji test() za testiranje input elemenata da se mogu unijeti podaci pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo destruktuiranu varijablu const { emailInputElement, passwordInputElement, confirmPasswordInputElement } 
-otvorimo link: https://www.npmjs.com/package/vitest
-importujemo funkciju beforeEach iz paketa Vitest
-u funkciji describe() pozivamo funkciju beforeEach()
-importujemo tip UserEvent iz paketa testing-library/user-event
-u funkciji describe() kreiramo varijablu let user sa tipom UserEvent
-u funkciji beforeEach() redeklarisemo varijablu user sa userEvent.setup()

24. Form Testing - Remaining Tests
-u komponenti Sandbox.test.tsx pozivamo funkciju test() sa dva argumenta
-prvi argument je opis testa za prikazivanje poruke greska ako email nije validan, dok je drugi argument anonimna asinhrona funkcija
-u funkciji test() pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInputElement, submitButton }
-pozivamo funkciju expect()
-pozivamo funkciju await user.type(emailInputElement, 'invalid')
-pozivamo funkciju await user.click(submitButton)
-pozivamo funkciju expect()
-pozivamo funkciju test()
-prvi argument je opis testa za prikazivanje poruke greska ako sifra nije validna, dok je drugi argument anonimna asinhrona funkcija
-u funkciji test() pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInputElement, passwordInputElement, submitButton }
-pozivamo funkciju expect()
-pozivamo dvije funkcije await user.type() i jednu funkciju await user.click()
-pozivamo funkciju expect()
-pozivamo funkciju test()
-prvi argument je opis testa za prikazivanje poruke greska ukoliko se sifre ne podudaraju, dok je drugi argument anonimna asinhrona funkcija
-u funkciji test() pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u cetiri destruktuirane varijable
-pozivamo funkciju expect()
-pozivamo tri funkcije await user.type() i jednu funkciju await user.click()
-pozivamo funkciju expect()
-pozivamo funkciju test()
-prvi argument je opis testa za neprikazivanje poruke greska nakon uspjesnog slanja forme, dok je drugi argument anonimna asinhrona funkcija
-u funkciji test() pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u cetiri destruktuirane varijable
-pozivamo tri funkcije await user.type() i jednu funkciju await user.click()
-pozivamo tri funkcije expect() i queryByText()
-pozivamo tri funkcije expect() i toHaveValue()

Quiz 4: Form Testing in React: Best Practices

25. Reviews App - Logic
-u komponentu App.tsx importujemo komponentu Sandbox.tsx iz foldera tutorial/06-reviews-app
-kreiramo komponente Form.tsx i List.tsx
-u komponentu Sandbox.tsx importujemo funkciju useState, komponente Form.tsx i List.tsx
-kreiramo i eksportujemo tip Review
-pozivamo funkciju useState() sa tipom <Review[]>
-kreiramo state varijablu const reviews i set funkciju setReviews
-kreiramo funkciju addReview() sa parametrom review
-parametru review dodajemo tip Review
-u funkciju addReview() dodajemo funkciju setReviews()
-roditelj div elementu dodajemo Tailwind CSS klase
-kreiramo h2 element
-u roditelj div element dodajemo komponente Form i List
-komponenti Form dodajemo prop onSubmit
-komponenti List dodajemo prop reviews
-u komponenti Form.tsx kreiramo tip ReviewFormProps
-importujemo tip Review iz komponente Sandbox.tsx
-importujemo funkcije useState i tip FormEvent iz biblioteke React
-funkciji Form() dodajemo parametar destruktuirani prop onSubmit sa tipom ReviewFormProps
-kreiramo state varijable email, rating, text i textError
-kreiramo set funkcije setEmail, setRating, setText i setTextError
-kreiramo funkciju handleSubmit() sa parametrom e
-parametru e dodajemo tip FormEvent
-u funkciju handleSubmit() dodajemo metodu e.preventDefault()
-u jsx-u kreiramo roditelj form element sa dogadajem onSubmit i prop className
-u dogadaj onSubmit proslijedujemo funkciju handleSubmit
-u form elemenata kreiramo tri div elementa za unos podataka za email, ocjenu i recenziju
-u div element za recenziju dodajemo uslov za kondicionalno renderovanje textError && 
-kreiramo button element sa prop type i className
-u funkciju handleSubmit() dodajemo uslove if (text.length >= 10) i else
-u uslov else dodajemo funkciju setTextError()
-u uslovu if kreiramo varijablu const newReview
-dodajemo funkciju onSubmit(newReview)
-dodajemo set funkcije setEmail(''), setRating(''), setText('') i setTextError('')
-u komponentu List.tsx importujemo tip Review iz komponentama Sandbox.tsx
-kreiramo tip ListProps
-funkciji List() dodajemo parametar destruktuirani prop reviews sa tipom ListProps
-u roditelj div elementu kreiramo h2 element
-dodajemo uslov ternarni operator reviews.length === 0
-u prvi dio ternarnog uslova dodajemo p element
-u drugi dio ternarnog uslova dodajemo metodu reviews.map()
-u funkciji map() kreiramo element article
-elementu article dodajemo prop key i className
-u elementu article kreiramo dva div elementa
-kreiramo p element

26. Reviews App - List Component Unit Tests
-kreiramo folder __tests__ 
-u folderu __tests__ kreiramo komponentu List.test.tsx komponentu
-u komponentu List.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo tip Review iz komponente Sandbox.tsx
-importujemo komponentu List.tsx
-importujemo funkcije describe, test i expect iz paketa Vitest
-pozivamo funkciju describe() sa dva argumenta
-prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkcija test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje naslova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render()
-u funkciju render() proslijedujemo komponentu List sa prop reviews
-u prop review proslijedujemo prazan niz
-pozivamo funkciju expect()
-kreiramo varijablu niz const mockReviews sa tipom Review[]
-u prop reviews proslijedujemo niz mockReviews
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za prikazivanje poruke da nema recenzija ukoliko je niz recenzija prazan, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<List reviews={[]} />)
-pozivamo funkciju expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za prikazivanje recenzija ukoliko postoje ispravni podaci, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju  render(<List reviews={mockReviews} />)
-pozivamo metodu mockReviews.forEach()
-u funkciji forEach() pozivamo dvije funkcije expect() za varijable review.email i review.text
-kreiramo varijablu const stars 
-pozivamo funkciju expect() za varijablu stars

27. Reviews App - Form Component Unit Tests
-kreiramo komponentu Form.test.tsx
-u komponentu Form.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo funkciju userEvent iz paketa testing-library/user-event
-importujemo komponentu Form.tsx
-importujemo funkcije describe, test, expect i vi iz paketa Vitest
-kreiramo funkciju getFormElements()
-u funkciji getFormElements() kreiramo cetiri varijable const emailInput, const ratingSelect, textArea i submitButton
-dodajemo izjavu return { emailInput, ratingSelect, textArea, submitButton }
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testa za formu, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju vi.fn()
-vrijednost funkcije vi.fn() pohranjujemo u varijablu const mockOnSubmit
-pozivamo funkciju beforeEach()
-u funkciji beforeEach() pozivamo funkciju mockOnSubmit.mockClear()
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje elemenata iz forme, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Form onSubmit={mockOnSubmit} />)
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInput, ratingSelect, textArea, submitButton }
-pozivamo cetiri funkcije expect() i toHaveValue()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za prikazivanje poruke greska ako recenzija ima kratak tekst, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji kreiramo varijablu const test
-pozivamo funkciju render(<Form onSubmit={mockOnSubmit} />)
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInput, ratingSelect, textArea, submitButton }
-pozivamo funkciju await user.type() za varijablu emailInput
-pozivamo funkciju await user.selectOptions() za varijablu ratingSelect
-pozivamo funkciju await user.type() za varijablu textArea
-pozivamo funkciju await user.click() za varijablu submitButton
-pozivamo dvije funkcije expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za slanje tacnih podataka iz forme, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji kreiramo varijablu const user
-pozivamo funkciju render(<Form onSubmit={mockOnSubmit} />)
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInput, ratingSelect, textArea, submitButton }
-pozivamo funkciju await user.type() za varijablu emailInput
-pozivamo funkciju await user.selectOptions() za varijablu ratingSelect
-pozivamo funkciju await user.type() za varijablu textArea
-pozivamo funkciju await user.click() za varijablu submitButton
-pozivamo funkciju expect(mockOnSubmit).toHaveBeenCalledTimes(1)
-pozivamo funkciju expect(mockOnSubmit).toHaveBeenCalledWith()
-u funkciju toHaveBeenCalledWith({ }) proslijedujemo objekt sa podacima za vrijednosti email, rating i text
-pozivamo tri funkcije expect() za varijable emailInput, ratingSelect i textArea

28. Reviews App - Sandbox Component Integration Tests
-kreiramo komponentu Sandbox.test.tsx
-u komponentu Sandbox.test.tsx importujemo funkcije render i screen iz paketa testing-library/react
-importujemo funkciju getFormElements iz komponente Form.test.tsx
-importujemo funkciju userEvent iz paketa testing-library/user-event
-importujemo komponentu Sandbox.tsx
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje naslova u komponenti, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<Sandbox />)
-pozivamo funkciju expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za dodavanje nove recenzije nakon slanja forme, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj funkciji kreiramo varijablu const user 
-pozivamo funkciju render(<Sandbox />)
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInput, ratingSelect, textArea, submitButton }
-pozivamo funkciju await user.type() za varijablu emailInput
-pozivamo funkciju await user.selectOptions() za varijablu ratingSelect
-pozivamo funkciju await user.type() za varijablu textArea
-pozivamo funkciju await user.click() za varijablu submitButton
-pozivamo tri funkcije expect() i toBeInTheDocument()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis alternativnog testa za dodavanje nove recenzije nakon slanja forme, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj funkciji kreiramo varijablu const user 
-pozivamo funkciju render(<Sandbox />)
-pozivamo funkciju screen.queryAllByRole('article')
-vrijednost funkcije screen.queryAllByRole('article') pohranjujemo u varijablu const reviews
-pozivamo funkciju expect(reviews).toHaveLength(0)
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { emailInput, ratingSelect, textArea, submitButton }
-pozivamo funkciju await user.type() za varijablu emailInput
-pozivamo funkciju await user.selectOptions() za varijablu ratingSelect
-pozivamo funkciju await user.type() za varijablu textArea
-pozivamo funkciju await user.click() za varijablu submitButton
-pozivamo jednu funkciju expect()

Quiz 5: Testing Logic in Reviews App: Components and Integration


Section 03: React Testing 101: Application Setup and Configuration

29. Create and Configure Template for Testing React Applications
-kreiramo folder 02-testing-project-template
-u terminalu ukucamo komandu npm create vite@latest .
-udemo u project cd 02-testing-project-template i ukucamo komandu npm i
-ukucamo komandu npm run dev
-u drugom terminalu ukucamo komandu npm i vitest --save-dev
-u package.json fajlu dodajemo komandu "test": "vitest"
-kreiramo random.test.ts fajl
-u random.test.ts fajl importujemo funkcije describe, text i expect iz paketa Vitest
-pozivamo funkciju describe()
-u funkciji describe() pozivamo dvije funkcije test()
-u terminalu ukucamo komandu npm test
-ukucamo komandu npm i @testing-library/react @testing-library/jest-dom --save-dev
-otvorimo link: https://www.npmjs.com/package/jsdom
-ukucamo komandu npm i jsdom @testing-library/user-event
-u vite.config.js fajlu dodajemo objekt test
-u objekt test dodajemo opciju environment: 'jsdom'
-u folderu src kreiramo vitest.setup.ts fajl
-u vitest.setup.ts fajl importujemo funkcije expect i afterEach iz paketa Vitest
-importujemo funkciju cleanup iz paketa testing-library/react
-importujemo * kao matchers iz paketa testing-library/jest-dom/matchers
-pozivamo funkciju expect.extend(matchers)
-pozivamo funkciju afterEach()
-u vite.config.ts fajlu, u objekt test dodajemo opcije globals: true i setupFiles: './src/vitest.setup.ts'
-promjenimo import funkcije defineConfig u vitest/config
-u tsconfig.app.json fajlu dodajemo opciju types
-kreiramo komponentu Random.tsx
-kreiramo folder __tests__ i komponentu Random.test.tsx
-u komponentu Random.test.tsx importujemo funkcije describe, test i expect iz paketa Vitest
-importujemo funkcije render i screen iz paketa testing-library/react
-importujemo funkciju Random.tsx
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() pozivamo funkciju test

Quiz 6: Testing Logic in Project Setup with Vitest and React Testing Library


Section 04: Test Driven Development - Focus Flow App

30. Focus Flow App - Intro
-kreiramo folder 03-tdd-focus-flow-project
-preuzmemo starter foldera i fajlove
-udemo u folder 03-tdd-focus-flow-project i u terminalu ukucamo komandu npm i
-ukucamo komandu npm run dev

31. Focus Flow App - Code Core Logic
-u folderu src kreiramo utils.ts fajl
-u utils.ts fajl importujemo funkciju useState
-kreiramo i eksportujemo tip ItemCategory
-kreiramo i eksportujemo tip Item
-kreiramo i eksportujemo tip ItemWithoutId
-kreiramo i eksportujemo funkciju useFlowManager()
-u funkciji useFlowManager() pozivamo funkciju useState<Item[]>([])
-kreiramo state varijablu const items i set funkciju setItems
-kreiramo funkcije handleAddItem() i handleDeleteItem()
-dodajemo izjavu return { items, handleAddItem, handleDeleteItem }
-u folderu src kreiramo folder components
-u folderu components kreiramo tsx komponente Form, List i ItemCard
-u komponentu App.tsx importujemo funkciju useFlowManager, tsx komponente Form i List
-u funkciji App() pozivamo funkciju useFlowManager()
-vrijednost funkcije useFlowManager() pohranjujemo u destruktuirane varijable const { items, handleAddItem, handleDeleteItem }
-u jsx-u kreiramo main element kao roditelj element sa Tailwind CSS klasama
-u main elementu kreiramo h1 element
-u main element dodajemo komponente Form i List
-komponenti Form dodajemo prop onSubmit
-komponenti List dodajemo prop items i onDelete
-u komponentu Form.tsx importujemo tipove ItemWithoutId i ItemCategory iz utils.ts fajla
-funkciji Form() dodajemo parametar destruktuirani prop onSubmit
-u komponentu List.tsx importujemo tip Item iz utils.ts fajla
-importujemo komponentu ItemCard.tsx
-funkciji List() dodajemo parametre destruktuirane prop items i onDelete
-parametrima dodajemo tipove

32. Focus Flow App - First Form Component Test
-u folderu src kreiramo folder __tests__ i komponentu Form.test.tsx
-u komponentu Form.test.tsx importujemo funkcije i tipove iz paketa za testiranje
-kreiramo funkciju getFormElements()
-pozivamo funkciju describe() sa dva argumenta
-prvi argument je opis za testiranje Form komponente, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji kreiramo varijablu let user sa tipom UserEvent
-pozivamo funkciju vi.fn()
-vrijednost funkcije vi.fn() pohranjujemo u varijablu const mockOnSubmit
-pozivamo funkciju beforeEach()
-u funkciji beforeEach() pozivamo funkciju mockOnSubmit.mockClear()
-pozivamo funkciju userEvent.setup()
-vrijednost funkcije userEvent.setup() pohranjujemo u varijablu user
-pozivamo funkciju render()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje praznih polja u formi, dok je drugi argument anonimna funkcija
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { titleInput, descriptionInput, categorySelect }
-pozivamo tri funkcije expect()
-u terminalu ukucamo komandu npm test
-u komponentu Form.tsx importujemo funkciju useState iz biblioteke React
-kreiramo tri state varijable title, description i category
-kreiramo tri set funkcije setTitle, setDescription i setCategory
-kreiramo funkciju handleSubmit() sa parametrom e
-u funkciji handleSubmit() pozivamo funkciju e.preventDefault()
-u roditelj div elementu kreiramo h2 element sa Tailwind CSS klasama
-kreiramo form element sa dogadajem onSubmit i prop className
-kreiramo tri div elementa za podatke o naslovu, opisu i kategoriji
-kreiramo button element sa prop type i className

33. Focus Flow App - Remaining Form Component Tests
-u komponenti Form.test.tsx pozivamo funkciju test() sa dva argumenta 
-u funkciji test() prvi argument je opis testa za sljanje forme sa unesenim podacima, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju getElements()
-vrijednost funkcije getElements() pohranjujemo u destruktuirane varijable const { titleInput, descriptionInput, categorySelect, submitButton }
-pozivamo funkciju await user.type() za varijablu titleInput
-pozivamo funkciju user.type() za varijablu descriptionInput
-pozivamo funkciju await user.selectOptions() za varijablu categorySelect
-pozivamo funkciju await user.click(submitButton)
-pozivamo funkciju expect(mockOnSubmit)
-u komponenti Form.tsx, u funkciju handleSubmit dodajemo funkciju onSubmit()
-u komponenti Form.test.tsx pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za validaciju obaveznih polja, dok je drugi argument anonimna funkcija
-u asinhronoj anonimnoj funkciji pozivamo funkciju getElements()
-vrijednost funkcije getElements() pohranjujemo u destruktuiranu varijablu const { submitButton }
-pozivamo funkciju await user.click(submitButton)
-pozivamo funkciju expect(mockOnSubmit).not.toHaveBeenCalled()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za ciscenje svih polja nakon slanja forme, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju render()
-pozivamo funkciju getElements()
-vrijednost funkcije getElements() pohranjujemo u destruktuirane varijable const { titleInput, descriptionInput, categorySelect, submitButton }
-pozivamo funkciju await user.type() za varijablu titleInput
-pozivamo funkciju user.type() za varijablu descriptionInput
-pozivamo funkciju await user.selectOptions() za varijablu categorySelect
-pozivamo funkciju await user.click(submitButton)
-pozivamo tri funkcije expect()
-u komponenti Form.tsx, u funkciju handleSubmit dodajemo funkcije setTitle(''), setDescription('') i setCategory('')

34. Focus Flow App - List Component Tests
-u folderu __tests__ kreiramo komponentu List.test.txt
-u komponentu List.test.tsx importujemo funkcije iz paketa za testiranje
-importujemo komponentu List.tsx
-importujemo tip Item iz utils.ts fajla
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji kreiramo varijablu niz const mockItems sa tipom Item[]
-pozivamo funkciju vi.fn()
-vrijednost funkcije vi.fn() pohranjujemo u varijablu const mockOnDelete
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje naslova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkcije render() i expect()
-u komponenti List.tsx, u jsx-u kreiramo roditelj section element
-u section elementu kreiramo h2 element
-pozivamo funkciju vi.mock() sa dva argumenta
-u funkciji mock() prvi argument je folder lokacije komponente ItemCard, dok je drugi argument anonimna funkcija
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje tacnog broja komponenti ItemCard, dok je drugi argument anonimna funkcija
-pozivamo funkciju render()
-kreiramo varijablu const cards
-pozivamo funkciju expect(cards).toHaveLength(2)
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje praznog grid elementa kad je niz prazan, dok je drugi argument anonimna funkcija
-pozivamo funkcije render() i screen()
-u komponenti List.tsx, u section elementu kreiramo div element sa Tailwind CSS Grid klasama
-u div elementu dodajemo metodu items?.map()
-u funkciju map() dodajemo komponentu ItemCard sa prop key, {...item} i onDelete
-pozivamo dvije test funkcije() sa dva argumenta
-prvi argument je tekst ALTERNATIVE (alternativni testovi za prethoda dva testa), dok je drugi argument anonimna funkcija

35. Focus Flow App - Card Component Tests
-u komponentu ItemCard.tsx importujemo React ikonicu Trash2 iz paketa Lucide React
-importujemo tip Item iz utils.ts fajla
-kreiramo tip ItemCardProps
-funkciji ItemCard() dodajemo parametre destruktuirane prop sa tipom ItemCardProps
-u folderu __tests__ kreiramo komponentu ItemCard.test.tsx 
-u komponentu ItemCard.test.tsx importujemo funkcije iz paketa za testiranje
-importujemo komponentu ItemCard.tsx
-importujemo tip Item iz utils.ts fajla
-kreiramo tip MockProps
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji kreiramo varijablu objekt const mockProps sa tipom MockProps
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje elemenata sa tacnim sadrzajem, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju render(<ItemCard {...mockProps} />)
-pozivamo tri funkcije expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za pozivanje funkcije onDelete kada se klikne dugme, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji kreiramo varijablu const user
-pozivamo funkciju render(<ItemCard {...mockProps} />)
-kreiramo varijablu const deleteButton
-pozivamo funkciju await user.click(deleteButton)
-pozivamo funkciju expect()
-u komponenti ItemCard.tsx, u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama
-kreiramo varijablu const categoryColors
-u jsx-u button elementu dodajemo prop onClick, aria-label i className

36. Focus Flow App - Context API
-u folderu src kreiramo komponente AppWithContext.tsx i FlowContext.tsx
-u komponentu FlowContext.tsx importujemo funkcije createContext, useContext, useState i tip ReactNode iz biblioteke React 
-importujemo tipove Item i ItemWithoutId iz utils.ts fajla
-kreiramo tip FlowContextType
-kreiramo varijablu komponentu const FlowContext
-kreiramo i eksportujemo funkciju FlowProvider() sa parametrom destruktuirani prop children
-parametru children dodajemo prop ReactNode
-u funkciji FlowProvider() kreiramo state varijablu const items i set funkciju setItems
-funkciji useState([]) dodajemo tip <Item[]>
-kreiramo funkcije handleAddItem() i handleDeleteItem()
-dodajemo izjavu return 
-u izjavu return dodajemo komponentu FlowContext.Provider sa otvorenim i zatvorenim tagom
-komponenti FlowContext.Provider dodajemo prop value
-u komponentu FlowContext.Provider dodajemo prop {children}
-kreiramo i eksportujemo funkciju useFlowContext()
-u funkciji useFlowContext() kreiramo varijablu const context
-dodajemo uslov if (context === undefined)
-u uslov if (context === undefined) dodajemo funkciju throw new Error()
-dodajemo izjavu return context
-u komponentu main.tsx importujemo komponentu AppWithContext.tsx 
-importujemo funkciju FlowProvider iz komponente FlowContext.tsx
-u jsx-u dodajemo komponentu FlowProvider sa otvorenim i zatvorenim tagom
-u komponentu FlowProvider dodajemo komponentu AppWithContext
-u komponentu AppWithContext.tsx importujemo funkciju useFlowContext iz komponente FlowContext.tsx
-importujemo komponente Form.tsx i List.tsx
-u funkciji AppWithContext() pozivamo funkciju useFlowContext()
-vrijednost funkcije useFlowContext() pohranjujemo u destruktuirane varijable const { items, handleAddItem, handleDeleteItem }
-kod u jsx kopiramo iz komponente App.tsx

37. Focus Flow App - App Component Integration Tests
-u folderu __tests__ kreiramo komponentu AppWithContext.test.tsx
-u komponentu AppWithContext.test.tsx importujemo funkcije i tip za paketa za testiranje
-importujemo komponentu FlowProvider iz komponente FlowContext.tsx
-importujemo komponentu AppWithContext.tsx
-kreiramo funkciju getElements()
-kreiramo funkciju customRenderAppWithContext()
-kreiramo asinhronu funkciju addTestItem() sa parametrom user
-parametru user dodajemo tip UserEvent
-u funkciji addTestItem() pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { titleInput, descriptionInput, categorySelect, submitButton }
-pozivamo funkciju await user.type() za varijable titleInput
-pozivamo funkciju await user.type() za varijablu descriptionInput
-pozivamo funkciju await user.selectOptions() za varijablu categorySelect
-pozivamo funkciju await user.click(submitButton)
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testova, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji kreiramo varijablu let user sa tipom UserEvent
-pozivamo funkciju beforeEach()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za renderovanje naslova i elemenata iz forme, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju expect()
-pozivamo funkciju getElements()
-vrijednost funkcije getElements() pohranjujemo u varijablu const elements
-pozivamo funkciju Object.values(elements).forEach()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za dodavanje zadatka, dok je drugi argument anonimna asinhrona funkcija
-u asinhronoj funkciji kreiramo varijablu const cardsBefore
-pozivamo funkciju expect(cardsBefore).toHaveLength(0)
-pozivamo funkciju await addTestItem(user)
-kreiramo varijablu const cardsAfter
-pozivamo cetiri funkcije expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za brisanje zadatka, dok je drugi argument anonimna asinhrona funkcija
-u anonimna asinhronoj funkciji pozivamo funkciju await addTestItem(user)
-kreiramo varijablu const deleteButton
-pozivamo funkciju expect(deleteButton).toBeInTheDocument()
-pozivamo funkciju await user.click(deleteButton)
-pozivamo dvije funkcije expect()

Practice Test 1: Testing Logic in Focus Flow App


Section 05: Mock Service Worker - Mocking API's

38. MSW - Intro
-kreiramo folder 04-mock-service-worker
-u folder 04-mock-service-worker dodajemo start foldere i fajlove potrebne za projekt

39. MSW - JSON Web Server and HTTP Requests
-otvorimo link: https://www.npmjs.com/package/json-server
-u terminalu instaliramo paket JSON Server sa komandom npm i json-server
-kreiramo db.json fajl
-u db.json fajlu kreiramo niz posts
-u package.json fajl dodajemo komandu: npx json-server db.json --port 4000
-u terminalu ukucamo komandu npm run server
-u pretrazivacu otvorimo rutu: http://localhost:4000/posts
-instaliramo VS Code ekstenziju REST Client
-kreiramo posts.http fajl
-u posts.http fajlu kreiramo vise HTTP zahtjeva

40. MSW - Main Logic
-otvorimo link: https://www.npmjs.com/package/axios
-u terminalu instaliramo paket Axios sa komandom: npx i axios
-u folderu src kreiramo folder hooks
-u folderu hooks kreiramo usePosts.ts fajl
-u usePosts.ts fajl importujemo funkciju useState iz paketa react
-importujemo instancu axios iz paketa axios
-kreiramo i eksportujemo tip Post
-kreiramo i eksportujemo tip PostWithoutId
-kreiramo varijablu const API_URL
-kreiramo i eksportujemo funkciju usePosts()
-u funkciji usePosts() pozivamo dvije funkcije useState() sa tipovima Post[] i String
-vrijednost prve funkcije useState() pohranjujemo u varijable const [posts, setPosts] 
-vrijednost druge funkcije useState() pohranjujemo u varijable const [error, setError]
-kreiramo asinhronu funkciju fetchPosts() sa tipom Promise<void>
-funkciji fetchPosts() dodajemo blokove koda try - catch
-u bloku koda try pozivamo funkciju await axios.get<Post[]>(API_URL)
-vrijednost funkcije axios.get() pohranjujemo u destruktuiranu varijablu const { data }
-pozivamo funkcije setPosts(data) i setError()
-u bloku koda catch (err) ispisujemo poruku err u konzoli i pozivamo funkciju setError()
-kreiramo asinhronu funkciju handleCreatePost() sa parametrom postData()
-parametru postData dodajemo tip PostWithoutId
-funkciji handleCreatePost() dodajemo tip Promise<vodi>
-u funkciji handleCreatePost() dodajemo blokove koda try i catch
-u bloku koda try pozivamo funkciju await axios.post()
-pozivamo funkcije await fetchPosts() i setError('')
-u bloku koda catch (err) ispisujemo poruku err u konzoli i pozivamo funkciju setError()
-kreiramo asinhronu funkciju handleLike() sa parametrom postId
-parametru postId dodajemo tip string
-funkciji handleLike() dodajemo tip Promise<void>
-u funkciju handleLike() dodajemo blokove koda try i catch
-u bloku koda try kreiramo varijablu const post
-dodajemo uslov if (!post)
-u uslov if (!post) pozivamo funkciju setError() i dodajemo izjavu return
-nakon uslova if pozivamo funkciju await axios.put()
-pozivamo funkcije await fetchPosts() i setError('')
-u bloku koda catch (err) ispisujemo poruku err u konzoli i pozivamo funkciju setError()
-kreiramo asinhronu funkciju handleDelete() sa parametrom postId
-parametru postId dodajemo tip string
-funkciji handleDelete() dodajemo tip Promise<void>
-u funkciju handleDelete() dodajemo blokove koda try - catch
-u bloku koda try pozivamo funkcije await axios.delete(), await fetchPosts() i setError('')
-u bloku koda catch (err) ispisujemo poruku err u konzoli i pozivamo funkciju setError()
-u funkciju usePosts() dodajemo izjavu objekt return { posts, error, fetchPosts, handleCreatePost, handleLike, handleDelete }

41. MSW - Front End
-u folderu src kreiramo folder components i komponente Form.tsx, List.tsx i Itemt.tsx
-u komponentu App.tsx importujemo funkciju useEffect iz paketa react
-importujemo funkciju usePosts iz usePosts.ts
-importujemo komponente Form.tsx i List.tsx
-u funkciji App() pozivamo funkciju usePosts()
-vrijednost funkcije usePosts() pohranjujemo u destruktuirane varijable i funkcije
-pozivamo funkciju useEffect() sa dva argumenta
-u funkciji useEffect() prvi argument je anonimna funkcija, dok je drugi argument prazan niz
-u anonimnoj funkciji pozivamo funkciju fetchPosts()
-u jsx-u dodajemo roditelj div elementu Tailwind CSS klase
-u div elementu h1 elementu dodajemo Tailwind CSS klase
-dodajemo uslov za kondicionalno renderovanje error &&
-dodajemo komponentu Form sa prop onSubmit
-dodajemo komponentu List sa prop posts, onLike i onDelete
-u komponentu Form.tsx importujemo funkcije useState, FormEvent i ChangeEvent iz paketa react
-kreiramo tip FormProps
-funkciji Form() dodajemo parametar destruktuirani prop onSubmit sa tipom FormProps
-u funkciji Form() pozivamo funkciju useState('')
-vrijednost funkciji useState('') pohranjujemo u varijable const [title, setTitle]
-kreiramo funkciju handleSubmit() sa parametrom e
-parametru e dodajemo tip FormEvent<HTMLFormElement> 
-u funkciji handleSubmit() pozivamo funkcije e.preventDefault(), onSubmit() i setTitle()
-kreiramo funkciju handleChange() sa parametrom e
-parametru e dodajemo tip ChangeEvent<HTMLInputElement>
-u jsx-u kreiramo form element kao roditelj element
-form elementu dodajemo dogadaj onSubmit i prop className
-u dogadaj onSubmit proslijedujemo funkciju handleSubmit
-u form elementu kreiramo label element sa prop htmlFor i className
-kreiramo input element sa prop type, id, value, onChange, placeholder, className i required
-kreiramo button element sa prop type i className
-u komponentu List.tsx importujemo komponentu Item.tsx
-importujemo tip Post iz usePosts.ts fajla
-kreiramo tip ListProps
-funkciji List() dodajemo parametre destruktuirane prop posts, onLike i onDelete sa tipom ListProps
-u roditelj div element dodajemo metodu posts?.map()
-u funkciju map() dodajemo komponentu Item sa prop key, post, onLike i onDelete
-u komponentu Item.tsx importujemo tip Post iz usePosts.ts fajla
-kreiramo tip ItemProps
-funkciji Post() dodajemo parametar destruktuirane prop post, onLike i onDelete sa tipom ItemProps
-u jsx-u kreiramo article element kao roditelj element sa prop key i className
-u article elementu kreiramo h3 element sa prop className
-kreiramo div element sa Tailwind CSS flex klasama
-u div elementu sa Tailwind CSS flex klasama kreiramo elemente div i button
-u div elementu kreiramo button element
-button elementima dodajemo prop onClick i className
-otvorimo aplikaciju u pretrazivacu i kreiramo objavu

42. MSW - Form, List and Item Unit Tests
-u folderu src kreiramo folder __tests__
-u folderu __tests__ kreiramo komponentu Form.test.tsx
-u komponentu Form.test.tsx importujemo paket @testing-library/jest-dom
-importujemo funkcije render i screen iz paketa testing-library/react
-importujemo funkciju userEvent i tip UserEvent iz paketa testing-library/user-event
-importujemo funkcije describe, test, expect, beforeEach i vi iz paketa vitest
-importujemo komponentu Form iz komponente Form.tsx
-kreiramo i eksportujemo funkciji getFormElements()
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je opis testa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju vi.fn()
-vrijednost funkcije vi.fn() pohranjujemo u varijablu const mockOnSubmit
-kreiramo varijablu let user sa tipom UserEvent
-pozivamo funkciju beforeEach()
-u funkciji beforeEach() pozivamo funkciju userEvent.setup()
-vrijednost funkcije userEvent.setup() pohranjujemo u varijablu const user
-pozivamo funkciju mockOnSubmit.mockClear()
-pozivamo funkciju render()
-nakon funkcije beforeEach() pozivamo vise funkcija test()
-u folderu __tests__ kreiramo komponentu List.test.tsx
-ponovimo slican postupak pisanja testova u komponenti List.test.tsx
-u folderu __tests__ kreiramo komponentu Item.test.tsx
-ponovimo slican postupak pisanja testova u komponenti Item.test.tsx

43. MSW - Info

44. MSW - Mock Fetch Posts
-otvorimo link: https://www.npmjs.com/package/msw
-u terminalu ukucamo komandu: npm i msw
-u folderu src kreiramo folder mocks i handlers.ts fajl
-u handlers.ts fajl importujemo funkcije http i HttpResponse iz paketa msw
-importujemo tip Post iz usePosts.ts fajla
-kreiramo varijablu const url
-kreiramo i eksportujemo varijablu niz const posts sa tipom Post[]
-kreiramo i eksportujemo varijablu niz const handlers
-u nizu handlers pozivamo funkciju http.get()
-u folderu mocks kreiramo server.ts fajl
-u server.ts fajl importujemo funkciju setupServer iz paketa msw/node
-importujemo niz handlers iz handlers.ts fajla
-pozivamo funkciju setupServer(...handlers)
-vrijednost funkcije setupServer(...handlers) pohranjujemo u varijablu const server
-varijablu server eksportujemo kao default
-u vitest.setup.ts fajl importujemo varijablu server
-importujemo funkcije beforeAll i afterAll iz paketa vitest
-pozivamo tri funkcije: beforeAll(), afterAll() i afterEach()
-u folderu __tests__ kreiramo komponentu App.test.tsx
-u komponentu App.test.tsx importujemo instancu React iz paketa react
-importujemo funkcije render, screen i within iz paketa esting-library/react
-importujemo funkcije describe, test i expect iz paketa vitest
-importujemo funkciju getFormElements iz komponente Form.test.tsx
-importujemo niz posts iz mocks/handlers.ts fajla
-importujemo funkciju userEvent iz biblioteke testing-library/user-event
-importujemo varijablu server iz server.ts fajla
-importujemo komponentu App iz komponente App.tsx
-pozivamo funkciju describe() sa dva argumenta
-u funkciji describe() prvi argument je ime testa, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkciju test() sa dva argumenta
-u anonimnoj funkciji prvi argument je opis testa za renderovanje komponente App, dok je drugi argument anonimna funkcija
-u anonimnoj funkciji pozivamo funkcije render() i expect()
-pozivamo jos jednu funkciju test() sa dva argumenta
-u anonimnoj funkciji prvi argument je opis testa za dohvacanje objava, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju render() i dvije funkcije expect()

45. MSW - Mock Remaining Requests
-u handlers.ts fajlu, u nizu handlers pozivamo funkciju http.post()
-funkciji post() dodajemo dva argumenta
-prvi argument u funkciji post() je varijabla url, dok je drugi argument anonimna asinhrona funkcija
-anonimnoj asinhronoj funkciji dodajemo destruktuirani parametar request
-u anonimnoj funkciji pozivamo funkciju await request.json() as Post
-vrijednost funkcije await request.json() pohranjujemo u varijablu const newPost
-u varijabli newPost varijabli id dodajemo vrijednost Date.now().toString()
-pozivamo funkciju posts.push(newPost)
-dodajemo izjavu return HttpResponse.json()
-pozivamo funkciju http.put()
-funkciji put() dodajemo dva argumenta
-prvi argument u funkciji put() je dinamicka varijabla url sa id-em, dok je drugi argument anonimna asinhrona funkcija
-anonimnoj asinhronoj funkciji dodajemo destruktuirane parametre params i request
-u anonimnoj funkciji destruktuiramo varijablu const { id } iz varijable params
-pozivamo funkciju await request.json() as Post
-vrijednost metode await request.json() pohranjujemo u varijablu const updatedPost
-kreiramo varijablu const index
-redeklarisemo varijablu posts[index] = updatedPost
-dodajemo izjavu return HttpResponse.json()
-pozivamo funkciju http.delete()
-funkciji delete() dodajemo dva argumenta
-prvi argument u funkciji delete() je dinamicka varijabla url sa id-em, dok je drugi argument anonimna asinhrona funkcija
-anonimnoj asinhronoj funkciji dodajemo destruktuirani parametar params
-u anonimnoj funkciji destruktuiramo varijablu const { id } iz varijable params
-pozivamo funkciju posts.filter()
-vrijednost funkcije posts.filter() redeklarisemo u varijablu niz posts
-dodajemo izjavu return HttpResponse.json()
-u komponenti App.test.tsx pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za kreiranje nove objave, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju userEvent.setup()
-vrijednost funkcije userEvent.setup() pohranjujemo u varijablu const user
-pozivamo funkciju render()
-pozivamo funkciju getFormElements()
-vrijednost funkcije getFormElements() pohranjujemo u destruktuirane varijable const { input, submitBtn }
-pozivamo funkcije await user.type() i await user.click()
-pozivamo funkciju expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za izmjenu objave, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju userEvent.setup()
-vrijednost funkcije userEvent.setup() pohranjujemo u varijablu const user
-pozivamo funkciju render()
-pozivamo funkciju await screen.findByRole()
-vrijednost funkcije await screen.findByRole() pohranjujemo u varijablu const likeBtn
-pozivamo funkciju await user.click(likeBtn)
-pozivamo funkciju expect()
-pozivamo funkciju test() sa dva argumenta
-u funkciji test() prvi argument je opis testa za brisanje objave, dok je drugi argument anonimna asinhrona funkcija
-u anonimnoj asinhronoj funkciji pozivamo funkciju userEvent.setup()
-vrijednost funkcije userEvent.setup() pohranjujemo u varijablu const user
-pozivamo funkciju render()
-pozivamo funkciju await screen.findAllByRole()
-vrijednost funkcije await screen.findAllByRole() pohranjujemo u varijablu const initialPosts
-pozivamo funkciju expect()
-kreiramo varijablu const lastPost
-pozivamo funkciju within()
-vrijednost funkcije within() pohranjujemo u varijablu const deleteBtn
-pozivamo funkciju await user.click(deleteBtn)
-pozivamo funkciju await screen.findAllByRole()
-vrijednost funkcije await screen.findAllByRole() pohranjujemo u varijablu const postsAfterDelete
-pozivamo funkciju expect()